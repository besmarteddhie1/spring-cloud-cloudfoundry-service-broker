apply plugin: 'base'

buildscript {
	repositories {
		mavenCentral()
		maven { url 'http://repo.spring.io/plugins-release' }
	}
	dependencies {
		classpath("io.spring.gradle:propdeps-plugin:0.0.10.RELEASE")
		classpath("io.spring.gradle:spring-io-plugin:0.0.8.RELEASE")
	}
}

ext {
	springVersion = '4.3.12.RELEASE'
	springSecurityVersion = '4.2.3.RELEASE'

	junitVersion = "4.12"
	mockitoVersion = "2.7.22"
	hamcrestVersion = "1.3"
	jsonPathVersion = "2.4.0"

	javadocLinks = [
			'http://docs.oracle.com/javase/8/docs/api/',
			'http://docs.spring.io/spring/docs/current/javadoc-api/',
	] as String[]
}

description = "Spring Cloud Service Broker"

allprojects {
	group = "org.springframework.cloud"

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'maven'
	apply plugin: 'propdeps'
	apply plugin: 'propdeps-maven'
	apply plugin: 'propdeps-idea'
	apply plugin: 'propdeps-eclipse'

	apply from: "${rootProject.projectDir}/publish-maven.gradle"

	if (project.hasProperty('platformVersion')) {
		apply plugin: 'spring-io'

		// necessary to resolve the Spring IO versions (which may include snapshots)
		repositories {
			maven { url "https://repo.spring.io/libs-snapshot" }
		}

		dependencyManagement {
			springIoTestRuntime {
				imports {
					mavenBom "io.spring.platform:platform-bom:${platformVersion}"
				}
			}
		}
	}

}

subprojects {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		mavenCentral()
	}
}

configure(rootProject) {
	task testsJar(type: Jar) {
		classifier = 'tests'
		from sourceSets.test.output
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc
	}

	task api(type: Javadoc) {
		group = "Documentation"
		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"

		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.links(project.ext.javadocLinks)

		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}

		classpath = files(subprojects.collect { project ->
			project.sourceSets.main.compileClasspath
		})

		maxMemory = "1024m"
		destinationDir = new File(buildDir, "api")
	}

	task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
				"for deployment."

		from(api) {
			into 'api'
		}
	}

	artifacts {
		archives docsZip
	}

	artifacts {
		archives testsJar
		archives sourcesJar
		archives javadocJar
		archives docsZip
	}

	task dist(dependsOn: assemble) {
		group = 'Distribution'
		description = 'Builds -dist and -docs distribution archives.'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.5'
}
